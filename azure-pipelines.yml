# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'VS2017-Win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  versionToBuild: ''
  
# Set name initialy to the BuildID (This is a counter, every time incremented when a build is started)
name: $(BuildID)

steps:

# read version from version.txt file and store it in a variable (versionToBuild)
- script: |
    set /p VER=<src/Plugin/version.txt
    @echo ##vso[task.setvariable variable=versionToBuild]%VER%

# Print out the version to build and update the buildNumber
- script: |
    echo The version from src/Plugin/version.txt is $(versionToBuild)
    @echo ##vso[build.updatebuildnumber]$(versionToBuild).$(build.buildnumber)

# install nuget toolset
- task: NuGetToolInstaller@0

# get the referenced nuget packages from nuget.org
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# update assembly version in AssemblyInfo.cs with the buildNumber value
- powershell: |
    function Update-SourceVersion
    {
        Param ([string]$Version)
        $NewVersion = 'AssemblyVersion("' + $Version + '")';
        Write-output $NewVersion
        $NewFileVersion = 'AssemblyFileVersion("' + $Version + '")';
        foreach ($o in $input) 
        {
            Write-output $o.FullName
            $TmpFile = $o.FullName + ".tmp"
            get-content $o.FullName | 
            %{$_ -replace 'AssemblyVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)', $NewVersion } |
            %{$_ -replace 'AssemblyFileVersion\("[0-9]+(\.([0-9]+|\*)){1,3}"\)', $NewFileVersion }  > $TmpFile

            move-item $TmpFile $o.FullName -force
        }
    }
    Write-output 'Modifiing AssemblyInfos.'
    foreach ($file in "AssemblyInfo.cs", "AssemblyInfo.vb" ) 
    {
        get-childitem -recurse |? {$_.Name -eq $file} | Update-SourceVersion $(build.buildnumber) ;
    }
   
# build software
- task: VSBuild@1
  inputs:
    solution: '$(solution)' 
    msbuildArgs: '/p:installerFileVersion=$(build.buildnumber)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    
# copy build results
- task: CopyFiles@2
  inputs:
    contents: 'src/Plugin/Setup/bin/Release/*.msi'
    targetFolder: $(Build.ArtifactStagingDirectory)

# publish build results
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: Output